ALPACA_API_KEY_ID=PKMJT6MUN5WKY1HK902L
ALPACA_SECRET_KEY=WsmKyiQdpfld9LWf5RIRykhzyWNOEAtqGBO5WKGP
SUPABASE_URL=https://uqnmywjfwjlsdxqktdgk.supabase.co
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVxbm15d2pmd2psc2R4cWt0ZGdrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc1MzE1NTIsImV4cCI6MjA3MzEwNzU1Mn0.854CBrrrnRqTlG_XzdLigUNyn26xVZaEG-t2iUBGvKk

ENCRYPTION_KEY = os.getenv("ENCRYPTION_KEY") or Fernet.generate_key().decode()
cipher = Fernet(ENCRYPTION_KEY.encode() if isinstance(ENCRYPTION_KEY, str) else ENCRYPTION_KEY)

class UserAlpacaManager:
    """Manage individual user Alpaca connections"""
    
    def __init__(self):
        self.user_connections = {}  # Cache of active connections
    
    def encrypt_credentials(self, api_key: str, secret_key: str) -> Dict:
        """Encrypt Alpaca credentials for storage"""
        encrypted_key = cipher.encrypt(api_key.encode()).decode()
        encrypted_secret = cipher.encrypt(secret_key.encode()).decode()
        return {
            'api_key_encrypted': encrypted_key,
            'secret_key_encrypted': encrypted_secret
        }
    
    def decrypt_credentials(self, encrypted_data: Dict) -> Dict:
        """Decrypt stored Alpaca credentials"""
        api_key = cipher.decrypt(encrypted_data['api_key_encrypted'].encode()).decode()
        secret_key = cipher.decrypt(encrypted_data['secret_key_encrypted'].encode()).decode()
        return {'api_key': api_key, 'secret_key': secret_key}
    
    async def link_alpaca_account(self, user_id: str, api_key: str, secret_key: str, paper: bool = True) -> Dict:
        """Link user's Alpaca account"""
        try:
            # Test the credentials
            base_url = 'https://paper-api.alpaca.markets' if paper else 'https://api.alpaca.markets'
            api = tradeapi.REST(api_key, secret_key, base_url=base_url, api_version='v2')
            
            # Verify by getting account info
            account = api.get_account()
            
            # Encrypt and store credentials
            encrypted = self.encrypt_credentials(api_key, secret_key)
            
            if supabase:
                # Store in database
                supabase.table('alpaca_accounts').upsert({
                    'user_id': user_id,
                    'api_key_encrypted': encrypted['api_key_encrypted'],
                    'secret_key_encrypted': encrypted['secret_key_encrypted'],
                    'paper_trading': paper,
                    'account_number': account.account_number,
                    'buying_power': float(account.buying_power),
                    'portfolio_value': float(account.portfolio_value),
                    'linked_at': datetime.now().isoformat()
                }).execute()
            
            # Cache the connection
            self.user_connections[user_id] = api
            
            return {
                'success': True,
                'account_number': account.account_number,
                'buying_power': float(account.buying_power),
                'portfolio_value': float(account.portfolio_value),
                'paper_trading': paper
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'message': 'Invalid Alpaca credentials or API error'
            }
    
    async def get_user_api(self, user_id: str) -> tradeapi.REST:
        """Get user's Alpaca API connection"""
        # Check cache first
        if user_id in self.user_connections:
            return self.user_connections[user_id]
        
        # Load from database
        if supabase:
            result = supabase.table('alpaca_accounts').select('*').eq('user_id', user_id).execute()
            if result.data:
                account_data = result.data[0]
                creds = self.decrypt_credentials(account_data)
                
                base_url = 'https://paper-api.alpaca.markets' if account_data['paper_trading'] else 'https://api.alpaca.markets'
                api = tradeapi.REST(creds['api_key'], creds['secret_key'], base_url=base_url, api_version='v2')
                
                # Cache it
                self.user_connections[user_id] = api
                return api
        
        return None
